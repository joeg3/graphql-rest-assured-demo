plugins {
    id 'java-library'
}

sourceCompatibility = '15' // Need Java 15 for Text Blocks

repositories {
    mavenCentral() // Repository from which we retrieve dependency libraries
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.1'

    testImplementation 'io.rest-assured:rest-assured:4.5.1'
    testImplementation 'org.assertj:assertj-core:3.15.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

test {
    useJUnitPlatform {
        // Default value for properties in gradle.properties, or override on command line: -Pplatform=some_value
        systemProperty "platform", project.getProperty("platform")
        if (project.getProperty("platform") != "test" && project.getProperty("platform") != "staging") {
            throw new InvalidUserDataException("GRADLE ERROR: Platform Property is '" + project.getProperty("platform") + "', but should be 'staging' or 'test'");
        }
        systemProperty "github.token", project.getProperty("github.token")
        if (project.getProperty("github.token") == "enter_github_token_here" || project.getProperty("github.token") == "") {
            throw new InvalidUserDataException("GRADLE ERROR: github.token Property is not set. Set in gradle.properties or with command line property");
        }

        println "##################################################"
        println "  Starting GraphQL Rest Assured Demo on platform: " + project.getProperty("platform")
        println "##################################################"
    }

    dependsOn 'cleanTest' // Always run tests, even when nothing changed

    testLogging {
        // Log result for each test as they run
        events "passed", "skipped", "failed", "standardOut", "standardError"

        exceptionFormat = 'full' // For test failures, show assertion on why it failed instead of just the line number of failure
        showStandardStreams = true // Show stdout and stderr of tests on console
    }

    // Show summary of test run
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }

}
